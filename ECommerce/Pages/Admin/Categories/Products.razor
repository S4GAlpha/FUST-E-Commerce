@page "/products"
@using ECommerce.Models
@using ECommerce.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext

<h3>Gestione Prodotti</h3>

<!-- Form per aggiungere/modificare un prodotto -->
<div class="card p-3">
    <h5>@(EditingProduct.Id == 0 ? "Aggiungi Prodotto" : "Modifica Prodotto")</h5>
    <div class="mb-3">
        <label>Nome:</label>
        <input type="text" class="form-control" @bind="EditingProduct.Name" />
    </div>
    <div class="mb-3">
        <label>Descrizione:</label>
        <textarea class="form-control" @bind="EditingProduct.Description"></textarea>
    </div>
    <div class="mb-3">
        <label>Prezzo:</label>
        <input type="number" class="form-control" @bind="EditingProduct.Price" step="0.01" />
    </div>
    <div class="mb-3">
        <label>URL Immagine:</label>
        <input type="text" class="form-control" @bind="EditingProduct.ImageUrl" />
    </div>
    <div class="mb-3">
        <label>Categoria:</label>
        <select class="form-control" @bind="EditingProduct.CategoryId">
            <option value="">-- Seleziona una categoria --</option>
            @foreach (var category in CategoriesList)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </select>
    </div>
    <button class="btn btn-primary" @onclick="SaveProduct">@(EditingProduct.Id == 0 ? "Aggiungi" : "Aggiorna")</button>
    <button class="btn btn-secondary ms-2" @onclick="ResetForm">Annulla</button>
</div>

<!-- Lista dei prodotti -->
<table class="table mt-4">
    <thead>
        <tr>
            <th>Nome</th>
            <th>Descrizione</th>
            <th>Prezzo</th>
            <th>Quantità</th>
            <th>Categoria</th>
            <th>Azioni</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in ProductsList)
        {
            <tr>
                <td>@product.Name</td>
                <td>@product.Description</td>
                <td>@product.Price €</td>
                <td>@(product.Category?.Name ?? "Nessuna categoria")</td>
                <td>
                    <button class="btn btn-warning btn-sm" @onclick="() => EditProduct(product)">Modifica</button>
                    <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteProduct(product.Id)">Elimina</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Product> ProductsList = new();
    private List<Category> CategoriesList = new();
    private Product EditingProduct = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadCategories();
    }

    private async Task LoadProducts()
    {
        ProductsList = await Task.Run(() => DbContext.Products.Include(p => p.Category).ToList());
    }

    private async Task LoadCategories()
    {
        CategoriesList = await Task.Run(() => DbContext.Categories.ToList());
    }

    private async Task SaveProduct()
    {
        if (EditingProduct.Id == 0)
        {
            DbContext.Products.Add(EditingProduct);
        }
        else
        {
            var existingProduct = DbContext.Products.Find(EditingProduct.Id);
            if (existingProduct != null)
            {
                existingProduct.Name = EditingProduct.Name;
                existingProduct.Description = EditingProduct.Description;
                existingProduct.Price = EditingProduct.Price;
                existingProduct.ImageUrl = EditingProduct.ImageUrl;
                existingProduct.CategoryId = EditingProduct.CategoryId;
            }
        }
        await DbContext.SaveChangesAsync();
        await LoadProducts();
        ResetForm();
    }

    private void EditProduct(Product product)
    {
        EditingProduct = new Product
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price,
                ImageUrl = product.ImageUrl,
                CategoryId = product.CategoryId
            };
    }

    private async Task DeleteProduct(int id)
    {
        var product = DbContext.Products.Find(id);
        if (product != null)
        {
            DbContext.Products.Remove(product);
            await DbContext.SaveChangesAsync();
            await LoadProducts();
        }
    }

    private void ResetForm()
    {
        EditingProduct = new Product();
    }
}
