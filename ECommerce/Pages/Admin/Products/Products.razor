@page "/Admin/products"
@using ECommerce.Models
@using ECommerce.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject ApplicationDbContext DbContext
@inject IWebHostEnvironment WebHostEnvironment

<h3 class="mb-4">Gestione Prodotti</h3>

<!-- Form per aggiungere/modificare un prodotto -->
<div class="card shadow-sm mb-4">
    <div class="card-header">
        <h5 class="card-title mb-0">@(EditingProduct.Id == 0 ? "Aggiungi Prodotto" : "Modifica Prodotto")</h5>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <label class="form-label">Nome:</label>
            <input type="text" class="form-control" @bind="EditingProduct.Name" />
        </div>
        <div class="mb-3">
            <label class="form-label">Descrizione:</label>
            <textarea class="form-control" @bind="EditingProduct.Description"></textarea>
        </div>
        <div class="mb-3">
            <label class="form-label">Prezzo:</label>
            <input type="number" class="form-control" @bind="EditingProduct.Price" step="0.01" />
        </div>
        <div class="mb-3">
            <label class="form-label">URL Immagine:</label>
            <div class="input-group">
                <input type="text" class="form-control" @bind="EditingProduct.ImageUrl" readonly />
                <InputFile OnChange="HandleSelected" class="form-control" />
            </div>
        </div>
        <div class="mb-3">
            <label class="form-label">Categoria:</label>
            <select class="form-control" @bind="EditingProduct.CategoryId">
                <option value="">-- Seleziona una categoria --</option>
                @foreach (var category in CategoriesList)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
        <div class="d-flex justify-content-end">
            <button class="btn btn-primary me-2" @onclick="SaveProduct">@(EditingProduct.Id == 0 ? "Aggiungi" : "Aggiorna")</button>
            <button class="btn btn-secondary" @onclick="ResetForm">Annulla</button>
        </div>
    </div>
</div>

<!-- Lista dei prodotti -->
<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Immagine</th>
                <th>Nome</th>
                <th>Descrizione</th>
                <th>Prezzo</th>
                <th>Categoria</th>
                <th>Azioni</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in ProductsList)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img src="@product.ImageUrl" alt="@product.Name" style="width: 50px; height: auto;" />
                        }
                    </td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price €</td>
                    <td>@(product.Category?.Name ?? "Nessuna categoria")</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditProduct(product)">Modifica</button>
                        <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteProduct(product.Id)">Elimina</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Product> ProductsList = new();
    private List<Category> CategoriesList = new();
    private Product EditingProduct = new();
    private IBrowserFile? selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadCategories();
    }

    private async Task LoadProducts()
    {
        ProductsList = await Task.Run(() => DbContext.Products.Include(p => p.Category).ToList());
    }

    private async Task LoadCategories()
    {
        CategoriesList = await Task.Run(() => DbContext.Categories.ToList());
    }

    private async Task SaveProduct()
    {
        if (selectedFile != null)
        {
            var filePath = Path.Combine(WebHostEnvironment.WebRootPath, "images", selectedFile.Name);
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await selectedFile.OpenReadStream().CopyToAsync(stream);
            }
            EditingProduct.ImageUrl = $"/images/{selectedFile.Name}";
        }

        if (EditingProduct.Id == 0)
        {
            DbContext.Products.Add(EditingProduct);
        }
        else
        {
            var existingProduct = DbContext.Products.Find(EditingProduct.Id);
            if (existingProduct != null)
            {
                existingProduct.Name = EditingProduct.Name;
                existingProduct.Description = EditingProduct.Description;
                existingProduct.Price = EditingProduct.Price;
                existingProduct.ImageUrl = EditingProduct.ImageUrl;
                existingProduct.CategoryId = EditingProduct.CategoryId;
            }
        }
        await DbContext.SaveChangesAsync();
        await LoadProducts();
        ResetForm();
    }

    private void EditProduct(Product product)
    {
        EditingProduct = new Product
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price,
                ImageUrl = product.ImageUrl,
                CategoryId = product.CategoryId
            };
    }

    private async Task DeleteProduct(int id)
    {
        var product = DbContext.Products.Find(id);
        if (product != null)
        {
            DbContext.Products.Remove(product);
            await DbContext.SaveChangesAsync();
            await LoadProducts();
        }
    }

    private void ResetForm()
    {
        EditingProduct = new Product();
        selectedFile = null;
    }

    private void HandleSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }
}
